apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: "executor"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
        component: "executor"
      {{- if .Values.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      serviceAccountName: {{ if .Values.rbac.create }}{{ template "fullname" . }}{{ else }}{{ .Values.rbac.serviceAccountName | quote }}{{ end }}
      hostname: "{{ template "fullname" . }}"
{{- if .Values.operator.enabled }}
      initContainers:
      - name: kube-plex-install
        image: "{{ .Values.operator.image.repository }}:{{ .Values.operator.image.tag }}"
        imagePullPolicy: {{ .Values.operator.image.pullPolicy }}
        command:
        - cp
        - /plex-operator
        - /shared/plex-operator
        volumeMounts:
        - name: shared
          mountPath: /shared
{{- end }}
      containers:
      - name: plex
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.operator.enabled }}
        # We replace the PMS binary after plex finishes upgrading
        command: ["/bin/bash"]
        args:
          - -c
          - |
            #!/bin/bash
            set -e
            # If Plex Transcoder exists then let copy plex-executor now
            if [ -f '/usr/lib/plexmediaserver/Plex Transcoder' ]; then
              rm -f '/usr/lib/plexmediaserver/Plex Transcoder'
              cp /shared/plex-operator '/usr/lib/plexmediaserver/Plex Transcoder'
            fi
            # either way add the commands to the update script so that after an update it runs again
            echo "#!/usr/bin/with-contenv bash" >> /etc/cont-init.d/80-plex-operator-install
            echo "set -e" >> /etc/cont-init.d/80-plex-operator-install
            echo "rm -f '/usr/lib/plexmediaserver/Plex Transcoder'" >> /etc/cont-init.d/80-plex-operator-install
            echo "cp /shared/plex-operator '/usr/lib/plexmediaserver/Plex Transcoder'" >> /etc/cont-init.d/80-plex-operator-install
            /init
{{- end }}
        readinessProbe:
          httpGet:
            path: /identity
            port: 32400
          initialDelaySeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /identity
            port: 32400
          initialDelaySeconds: 5
          timeoutSeconds: 10
        ports:
          - name: pms
            containerPort: 32400
          - name: http
            containerPort: 32400
          - name: https
            containerPort: 32443
        env:
        - name: TZ
          value: "{{ .Values.timezone }}"
        # TODO: move this to a secret?
        - name: PLEX_CLAIM
          value: "{{ .Values.claimToken }}"
        # kube-plex env vars
        - name: PMS_INTERNAL_ADDRESS
          value: http://{{ template "fullname" . }}:32400
        - name: PMS_IMAGE
          value: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
{{- if .Values.operator.enabled }}
        - name: PLEX_OPERATOR_COMPONENT
          value: executor
        - name: WATCH_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
{{- end }}
{{- if .Values.persistence.config.transcoderPod }}
        - name: CONFIG_TRANSCODER_PVC
          value: "{{ .Values.persistence.config.transcoderPod }}"
{{- end }}
        volumeMounts:
        - name: data
          mountPath: /data
        {{- if .Values.persistence.data.subPath }}
          subPath: {{ .Values.persistence.data.subPath }}
        {{ end }}
        - name: config
          mountPath: /config
        {{- if .Values.persistence.config.subPath }}
          subPath: {{ .Values.persistence.config.subPath }}
        {{ end }}
        - name: transcode
          mountPath: /transcode
        {{- if .Values.persistence.transcode.subPath }}
          subPath: {{ .Values.persistence.transcode.subPath }}
        {{ end }}
        - name: shared
          mountPath: /shared
        resources:
{{ toYaml .Values.resources | indent 10 }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
      volumes:
      - name: data
      {{- if and .Values.persistence.data.enabled (not .Values.persistence.data.hostPath) }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.data.existingClaim }}{{ .Values.persistence.data.existingClaim }}{{- else }}{{ template "fullname" . }}-data{{- end }}
      {{- else if and .Values.persistence.data.enabled .Values.persistence.data.hostPath }}
        hostPath:
          path: {{ .Values.persistence.data.hostPath }}
          type: DirectoryOrCreate
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: config
      {{- if and .Values.persistence.config.enabled (not .Values.persistence.config.hostPath) }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.config.existingClaim }}{{ .Values.persistence.config.existingClaim }}{{- else }}{{ template "fullname" . }}-config{{- end }}
      {{- else if and .Values.persistence.config.enabled .Values.persistence.config.hostPath }}
        hostPath:
          path: {{ .Values.persistence.config.hostPath }}
          type: DirectoryOrCreate
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: transcode
      {{- if and .Values.persistence.transcode.enabled (not .Values.persistence.transcode.hostPath) }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.transcode.existingClaim }}{{ .Values.persistence.transcode.existingClaim }}{{- else }}{{ template "fullname" . }}-transcode{{- end }}
      {{- else if and .Values.persistence.transcode.enabled .Values.persistence.transcode.hostPath }}
        hostPath:
          path: {{ .Values.persistence.transcode.hostPath }}
          type: DirectoryOrCreate
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: shared
        emptyDir: {}
---
{{- if .Values.operator.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-operator
  labels:
    app: {{ template "name" . }}-operator
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: "operator"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "name" . }}-operator
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}-operator
        release: {{ .Release.Name }}
        component: "operator"
    spec:
      serviceAccountName: {{ if .Values.rbac.create }}{{ template "fullname" . }}{{ else }}{{ .Values.rbac.serviceAccountName | quote }}{{ end }}
      containers:
        - name: plex-operator
          image: "{{ .Values.operator.image.repository }}:{{ .Values.operator.image.tag }}"
          imagePullPolicy: {{ .Values.operator.image.pullPolicy }}
          env:
            - name: PMS_INTERNAL_ADDRESS
              value: http://{{ template "fullname" . }}:32400
            - name: PLEX_OPERATOR_COMPONENT
              value: operator
          {{- if .Values.persistence.config.transcoderPod }}
            - name: CONFIG_TRANSCODER_PVC
              value: "{{ .Values.persistence.config.transcoderPod }}"
          {{- end }}
            - name: WATCH_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: plex-operator
{{- end }}
